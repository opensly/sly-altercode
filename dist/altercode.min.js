!function(e,t){"use strict";function i(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(i){if("default"!==i){var r=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(t,i,r.get?r:{enumerable:!0,get:function(){return e[i]}})}})),t.default=e,Object.freeze(t)}var r=i(e);class s{config;requiredFiles=[];constructor(e){this.config=e,this.getFilesOfDir(this.config.sourceDir)}getFilesOfDir(e){r.readdirSync(e).map((i=>t.join(e,i))).forEach((e=>{r.statSync(e).isDirectory()?this.getFilesOfDir(e):this.isFileAllowed(e)&&this.requiredFiles.push(e)}))}isFileAllowed(e){const t=this.config.excludeExtns||[];if(!r.existsSync(e)||0===r.statSync(e).size)return!1;for(const i of t)if(e.includes(i))return!1;return!0}}class c{files;replacements;constructor(e,t){this.files=e,this.replacements=t}async findAndReplaceInFiles(){for(const t of this.files)try{let i=await e.promises.readFile(t,"utf8");for(const{searchString:e,replaceWith:t}of this.replacements)i=i.replace(new RegExp(e,"g"),t);await e.promises.writeFile(t,i,"utf8"),console.log(`Successfully updated ${t}`)}catch(e){console.error(`Error processing file ${t}:`,e)}}}const n=process.argv[3];let o;r.readFile(n,"utf8",(function(e,t){if(e)throw e;o=JSON.parse(t);const i=new s(o);new c(i.requiredFiles,o.mutations).findAndReplaceInFiles()}))}(fs,path);
